## 引言：
  逃逸分析（Escape Analysis)是众多JVM技术中的一个使用不多的技术点，本文将通过一个实例来分析其使用场景。

## 概念
  逃逸分析，是一种可以有效减少Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。
  通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。
  在计算机语言编译器优化原理中，逃逸分析是指分析指针动态范围的方法，它同编译器优化原理的指针分析和外形分析相关联。
  当变量（或者对象）在方法中分配后，其指针有可能被返回或者被全局引用，这样就会被其他过程或者线程所引用，
  这种现象称作指针（或者引用）的逃逸(Escape)。

## 意思:
  通过逃逸分析来决定某些实例或者变量是否要在堆中进行分配，如果开启了逃逸分析，即可将这些变量直接在栈上进行分配，
  而非堆上进行分配。这些变量的指针可以被全局所引用，或者其其它线程所引用。
